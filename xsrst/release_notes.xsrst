-----------------------------------------------------------------------------
at_cascade: Cascading Dismod_at Analysis From Parent To Child Regions
          Copyright (C) 2021-22 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
    GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-----------------------------------------------------------------------------
{xsrst_begin_parent release_notes}

Release Notes for at_cascade
############################

{xsrst_end release_notes}
-----------------------------------------------------------------------------
{xsrst_begin 2020}

Release Notes for 2022
######################

01-08
*****
Fix a bug in :ref:`create_shift_db<create_shift_db>`.
To be specific, the mean int a value prior child variable in the shifted
database (child database) might not satisfy the prior limits.
This violated the dismod_at assumptions about the value prior means.

01-02
*****
1.  The cascade would hang at the end, instead of detecting completion,
    when :ref:`all_option_table.max_number_cpu` was greater the one.
    This has been fixed.

2.  Use :ref:`create_job_table.job_table.job_name`
    as the key for each job in the :ref:`check_log.message_dict` return value.

{xsrst_end 2020}
-----------------------------------------------------------------------------
{xsrst_begin 2021}
{xsrst_spell
    dir
    iter
}

Release Notes for 2021
######################

12-29
*****
1.  Fix error recovery and add more job status reporting to
    :ref:`run_parallel`.

2.  Document the :ref:`run_parallel.trace_out` file.

12-28
*****
1.  Change results_dir to result_dir.

2.  Remove the *trace_fit* parameter.

12-26
*****
1.  Add exception handling to running in parallel so that
    program does not hang when a job fails.

2.  Change the run_one_job trace_fit argument to
    :ref:`run_one_job.trace_file_obj` so that opening and closing the file
    is managed by the calling program.

12-24
*****
1.  The base_directory was changed to the :ref:`all_option_table.result_dir`
    and now a required option the all_option table.

2.  Change required precision in example/mulcov_freeze.py to reduce probability
    of random test failure.

3.  Replace :ref:`no_ode_fit` max_fit and max_abs_effect arguments by
    :ref:`no_ode_fit.all_option_dict`.

4.  In no_ode_fit, change in_database to :ref:`no_ode_fit.root_node_database`,
    and change out_database to :ref:`no_ode_fit.root_fit_database`.

12-21
*****
1.  The output files are now relative to the base_directory
    (they used to be relative to the current working directory).

2.  Starting from a :ref:`glossary.root_node` that was not at the top
    of the node tree did not work. The :ref:`one_at_function` was
    modified to test for this problem and the problem was fixed.

12-08
*****
Remove the convergence problem :ref:`wish_list` entry becasue it was completed
when the :ref:`all_option_table.perturb_optimization_scaling` option
was added.

12-06
*****
Add the :ref:`mulcov_freeze` table which enables one to freeze the
value of a covariate multiplier so it is the same for all fits
below a certain point.

12-05
*****
1.  Add the :ref:`check_log` routine.

2.  Add the :ref:`all_option_table.perturb_optimization_scaling` option
    and list options in alphabetical order.

12-03
*****
1.  Add the :ref:`run_parallel` routine which
    runs :ref:`create_job_table.job_table` jobs
    sequentially (in parallel) when :ref:`run_parallel.max_number_cpu` is
    one (greater than one).

2.  Add a :ref:`wish_list` for at_cascade.

12-02
*****
1.  The :ref:`no_ode_fit` routine was setting the dismod_at
    max_num_iter_fixed option to 100 for all fits.
    This has been fixed and the option table setting is now used for all fits.

2.  Move cascade_fit_node to :ref:`cascade_root_node` (better name now that
    the routine is not recursive. In addition, change the fit_node_database
    argument name to :ref:`cascade_root_node.root_node_database`.

12-01
*****
1.  Add :ref:`get_database_dir<get_database_dir>`.
    This routine is for use with parallel processing.

2.  Change fit_node_database base create_job_table argument to
    :ref:`create_job_table.node_table`.

3.  Add :ref:`create_job_table.job_table.start_child_job_id` and
    :ref:`create_job_table.job_table.end_child_job_id` to the job table.

11-30
*****
Change the name get_job_table to
:ref:`create_job_table<create_job_table>`.

11-29
*****
1.  Add get_job_table. This routine is under construction and planned
    and part of a re-factoring for parallel processing.

2.  Add :ref:`all_option_table.root_split_reference_name`
    to the all_option table (so that get_job_table can use any
    fit_node_database).

11-28
*****
1.  Change the :ref:`create_all_node_db.all_option` argument to
    create_all_node_db to be a complete representation of the
    :ref:`all_option_table`.
    This reduces the amount of necessary documentation.
    It also requires that root_node_name be in the all_option argument.

2.  Change the :ref:`create_all_node_db.split_reference_table` argument to
    have a default value (corresponding to the empty table).

3.  Change split_level in the all_option table to the
    :ref:`node_split_table`.


{xsrst_end 2021}
