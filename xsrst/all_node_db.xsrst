-----------------------------------------------------------------------------
at_cascade: Cascading Dismod_at Analysis From Parent To Child Regions
          Copyright (C) 2021-21 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
    GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-----------------------------------------------------------------------------
{xsrst_begin_parent all_node_db}
{xsrst_spell
    tbl
}

The All Node DataBase
#####################
This data base contains information for all the nodes between the
:ref:`glossary.root_node` and the :ref:`glossary.fit_goal_set`.

Primary Key
***********
If *tbl_name* is the name of a table in this database,
the primary key column has name *tbl_name*\ ``_id`` .
This must be the first column, have type ``integer`` ,
initial value is zero, and it must increment by one for each row.

{xsrst_end all_node_db}
------------------------------------------------------------------------------
{xsrst_begin all_cov_reference_table}
{xsrst_spell
    covariate covariate
}

All Node Covariate Reference Table
##################################
This table specifies the reference values for the
:ref:`relative covariates<glossary.relative_covariate>`.

all_cov_reference_id
********************
is the :ref:`all_node_db.primary_key` for this table.

node_id
*******
This column has type ``integer`` and specifies
the node for this reference
by the primary key in the root_node_database node table.

covariate_id
************
This column has type ``integer`` and specifies
the covariate, for this reference,
by the primary key in the root_node_database covariate table.

split_reference_id
******************
This column has type ``integer`` and it specifies the
index of a value in :ref:`split_reference_table`.
If split_reference_table is empty (is not empty),
the values in this column must be (must not be) null.

reference
*********
This column has type ``real`` and it specifies the reference value
for this covariate and node.
For each node_id in the :ref:`glossary.fit_node_set`,
each relative covariate covariate_id ,
and each split_reference_id,
there must be one and only one reference value.

{xsrst_end all_cov_reference_table}
------------------------------------------------------------------------------
{xsrst_begin omega_grid}

Omega Grid
##########
The :ref:`glossary.omega_grid` is specified by the
omega_age_grid and omega_time_grid tables.

omega_age_grid Table
********************
This table has two columns, *omega_age_grid_id* and age_id.
If this table is empty, the omega_time_grid table must also be empty.

n_omega_age
===========
We use the notation n_omega_age for the number of values in this table.

omega_age_grid_id
=================
is the :ref:`all_node_db.primary_key` for this table.

age_id
======
This column has type ``integer`` and specifies the age grid points
by their index in the :ref:`glossary.root_node_database` age table.

omega_time_grid Table
*********************
This table has two columns, *omega_time_grid_id* and time_id.
If this table is empty, the omega_age_grid table must also be empty.

n_omega_time
============
We use the notation n_omega_time for the number of values in this table.

omega_time_grid_id
==================
is the :ref:`all_node_db.primary_key` for this table.

time_id
=======
This column has type ``integer`` and specifies the time grid points
by their index in the root_node_database time table.

{xsrst_end omega_grid}
------------------------------------------------------------------------------
{xsrst_begin all_mtall}

All Node mtall Values
#####################
The combination of the all_mtall and mtall_index tables specify
the value of :ref:`glossary.mtall` for all the nodes that have mtall data.

all_mtall Table
***************
This table specifies the value of :ref:`glossary.mtall` for each
age, time point in the :ref:`omega_grid`, every node, and each reference
in the :ref:`split_reference_table`.
This data is used to compute the :ref:`omega_constraint` for each node.
If mtall is not specified for a node, it will use the same *mtall*
values as its nearest ancestor node.
It is an error if there is no ancestor of a
:ref:`goal node<glossary.fit_goal_set>` that has mtall data.

all_mtall_id
============
is the :ref:`all_node_db.primary_key` for this table.

all_mtall_value
===============
This column has type ``real`` and is the value of mtall
for a specific node, age, and time; see mtall_index table below.
Each value in this column is mtall at a specific age and time
not on an age or time interval. If you only have mtall on age and time
intervals, use the midpoint age and midpoint time in the omega grid.

mtall_index Table
*****************
This table specifies the all_mtall_id at which the mtall values
for a particular node and split_reference begin.
Specifications for which age and time points
correspond to each all_mtall_id are included below.

mtall_index_id
==============
is the :ref:`all_node_db.primary_key` for this table.

node_id
=======
This column has type ``integer`` and specifies a node by its index
in the root node database node table.

split_reference_id
==================
This column has type ``integer`` and it specifies the
index of a value in
:ref:`split_reference_table`.
If split_reference_table is empty (is not empty),
the values in this column must be (must not be) null.

all_mtall_id
============
This column has type ``integer`` and specifies the index in the
all_mtall table where the mtall values,
for this node and split_reference, begin.
For *i* equal 0 through
:ref:`n_omega_age-1<omega_grid.omega_age_grid_table.n_omega_age>`
and *j* equal 0 through
:ref:`n_omega_time-1<omega_grid.omega_time_grid_table.n_omega_time>` ::

    all_mtall_id + i * n_omega_time + j

is the index in the all_mtall table of the value for this node,
the *i*-th age in the omega_grid,
and the *j*-th time in the omega_grid.
Note that each all_mtall_id in this table
should be a multiple of n_omega_age * n_omega_time
(because there are that many mtall entries for each node and each
split_reference value).

{xsrst_end all_mtall}
------------------------------------------------------------------------------
{xsrst_begin all_mtspecific}

All Node mtspecific Values
##########################
The combination of the all_mtspecific and mtspecific_index tables specify
the value of :ref:`glossary.mtspecific` for all the nodes that have
mtspecific data.
If mtspecific is not specified for a node, it will use the same *mtspecific*
values as its nearest ancestor node.
If there is no ancestor of a node that has mtspecific data,
:ref:`glossary.omega` will be approximated as equal to
:ref:`glossary.mtall` for that node.

all_mtspecific Table
********************
This table specifies the value of :ref:`glossary.mtspecific` for each
age, time point in the :ref:`omega_grid`,  every node, and each reference
in the :ref:`split_reference_table`.
If mtspecific is not specified for a node, it will use the same *mtspecific*
values as its nearest ancestor node.
If none of its ancestors have mtspecific data,
omega will be constrained to be equal to its mtall data for that node.

all_mtspecific_id
=================
is the :ref:`all_node_db.primary_key` for this table.

all_mtspecific_value
====================
This column has type ``real`` and is the value of mtspecific
for a specific node, age, and time; see mtspecific_index table below.
Each value in this column is mtspecific at the same age and time
as the corresponding :ref:`all_mtall.all_mtall_table.all_mtall_value`.

mtspecific_index Table
**********************
This table specifies the all_mtspecific_id at which the mtspecific values
for a particular node begin.
Specifications for which age and time points
correspond to each all_mtspecific_id are included.

mtspecific_index_id
===================
is the :ref:`all_node_db.primary_key` for this table.

node_id
=======
This column has type ``integer`` and specifies a node by its index
in the root node database node table.

split_reference_id
==================
This column has type ``integer`` and it specifies the
index of a value in
:ref:`split_reference_table`.
If split_reference_table is empty (is not empty),
the values in this column must be (must not be) null.

all_mtspecific_id
=================
This column has type ``integer`` and specifies the index in the
all_mtspecific table where the mtspecific values,
for this node and split_reference, begin.
For *i* equal 0 through
:ref:`n_omega_age-1<omega_grid.omega_age_grid_table.n_omega_age>`
and *j* equal 0 through
:ref:`n_omega_time-1<omega_grid.omega_time_grid_table.n_omega_time>`

    all_mtspecific_id + i * n_omega_time + j

is the index in the all_mtspecific table of the value for this node,
the *i*-th age in the omega_grid,
and the *j*-th time in the omega_grid.
Note that each all_mtspecific_id in this table should be a multiple of
n_omega_age * n_omega_time
(because there are that many mtspecific entries for each node and each
split_reference value).

{xsrst_end all_mtspecific}
------------------------------------------------------------------------------
{xsrst_begin all_option_table}
{xsrst_spell
    bnd
    std
    cpus
}

All Node Option Table
#####################
This table specifies certain at_cascade options

Table Format
************

all_option_id
=============
is the :ref:`all_node_db.primary_key` for this table.

option_name
===========
This column of the option table has type ``text``.
It specifies a name that is attached to each option value.

option_value
============
This column of the option table has type ``text``.
It specifies a value that is attached to each option name.

absolute_covariates
*******************
This is a space separate list of the names for the
covariates that do not change their reference value and hence are not
included in the :ref:`all_cov_reference_table`.
If this option does not appear, there are no absolute covariates.

max_abs_effect
**************
If this option appears, it specifies an extra bound on the
absolute value of the covariate multipliers,
except for measurement noise multipliers.
To be specific, the bound on the covariate multiplier is as large as possible
under the condition

| |tab| *max_abs_effect* <= | *cov_bnd* * ( *cov_value* - *cov_ref* ) |

where *cov_bnd* is the non-negative covariate multiplier bound,
*cov_value* is a data table value of the covariate,
and *cov_ref* is the reference value for the covariate.
It is an extra bound becasue it is in addition to the priors for a
covariate multiplier.

max_fit
*******
This is a text representation of a non-negative integer specifying
the maximum number of values to fit for each integrand.
If more than this number of values are available,
at a :ref:`glossary.fit_node` and for one integrand,
a randomly selected subset of the values
are held out so that only this number are included in the fit.
If this option does not appear, all of the data for each integrand is included
(unless held out in the root_node data table or option table).

max_number_cpu
**************
This is the maximum number of cpus (processors) that
:ref:`cascade_root_node` or :ref:`continue_cascade` can use.
If this is one (more than one) the jobs in the
:ref:`create_job_table.job_table`
will be run in sequentially (in parallel).
If this option does not appear, the value one is used.

perturb_optimization_scaling
****************************
This is the standard deviation of the log of a random multiplier.
The multiplier is used to randomly shift the
optimization scaling point from the prior mean.
This avoids bad scaling when the prior mean is very close to the solution.
(The scaling point is projected back to the feasible region.)
If this option does not appear, or if it is zero,
the scaling point is equal to the prior mean for all variables.

root_node_name
**************
This option_name must appear and the corresponding option_value
is the name of the :ref:`glossary.root_node` in the node table of the
:ref:`glossary.root_node_database` .
(The node table is the same in all the dismod_at databases.)

root_split_reference_name
*************************
This is the `split_reference_table.split_reference_name`
corresponding to the root_node_database.
If :ref:`split_reference_table` is empty (is not empty)
this option must not (must) appear.

shift_prior_std_factor
**********************
This factor multiplies the parent fit posterior standard deviation
for the :ref:`create_shift_db.shift_databases.value_priors`
in the shifted databases.
If it is greater (less) than one, the child priors are larger (smaller)
than the posterior corresponding to the parent node fit.
If this option does not appear, the value one is used for the factor.


split_covariate_name
********************
is the name, in the root_node_database covariate table, of the splitting
covariate.
If :ref:`split_reference_table` is empty (is not empty)
this option must not (must) appear.

{xsrst_end all_option_table}
------------------------------------------------------------------------------
{xsrst_begin split_reference_table}

Split Reference Table
#####################
This table specifies the possible reference values for the splitting covariate.
If this table is empty (is not empty),
the :ref:`all_option_table.split_covariate_name`
must not appear (must appear).

split_reference_id
******************
is the :ref:`all_node_db.primary_key` for this table.

split_reference_name
********************
This column has type ``text`` and contains a name attached
to each of the splitting covariate reference values.

split_reference_value
*********************
This column has type ``real`` and contains the possible reference values for
the splitting covariate.

{xsrst_end split_reference_table}
------------------------------------------------------------------------------
{xsrst_begin node_split_table}

Node Split Table
################
This table specifies the nodes at which the cascade will be split
by the value of the splitting covariate.
If this table is not empty,
the :ref:`all_option_table.split_covariate_name`
must appear and the
:ref:`split_reference_table` must not be empty.

node_split_id
*************
is the :ref:`all_node_db.primary_key` for this table.

node_id
*******
This column has type ``integer`` and contains a dismod_at node_id
at which the analysis will be split by the splitting covariate; i.e.,
this node will be fit both before and after the splitting.
The set of values in this column determine the
:ref:`glossary.node_split_set`.

{xsrst_end node_split_table}
------------------------------------------------------------------------------
{xsrst_begin mulcov_freeze_table}

Mulcov Freeze Table
###################
This table specifies the :ref:`jobs<glossary.job>`
at which the cascade will freeze the value of covariate multipliers
for its descendants (starting with its child jobs).
To be specific, the lower and upper limit for the covariate
multiplier in descendants of the job will be optimal value determined by job;
see :ref:`create_job_table.job_table.parent_job_id` in the job table.

mulcov_freeze_id
****************
is the :ref:`all_node_db.primary_key` for this table.

fit_node_id
***********
is the :ref:`create_job_table.job_table.fit_node_id` for the job
that will freeze the multiplier.

split_reference_id
******************
is the :ref:`create_job_table.job_table.split_reference_id` for the job
that will freeze the multiplier.

mulcov_id
*********
is the primary key in the dismod_at mulcov table for the multiplier
that is frozen.

{xsrst_end mulcov_freeze_table}
------------------------------------------------------------------------------
