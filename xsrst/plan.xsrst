-----------------------------------------------------------------------------
at_cascade: Cascading Dismod_at Analysis From Parent To Child Regions
          Copyright (C) 2021-21 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
    GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-----------------------------------------------------------------------------

{xsrst_begin plan}
{xsrst_spell
    var
}

AT Cascade Plan
###############

.. _dismod_at: https://bradbell.github.io/dismod_at/doc/dismod_at.htm
.. _dismod_at_input: https://bradbell.github.io/dismod_at/doc/input.htm

Purpose
*******
Run a dismod_at_ fit starting at :ref:`glossary.root_node` and including
all the nodes in :ref:`glossary.fit_goal_set`.
All of the nodes between *root_node* and each element of *fit_goal_set*
are also fit.


Input Data
**********

Root Node Database
==================
We are using a dismod_at
:ref:`glossary.root_node_database` so we can use the dismod_at
database specifications.
In addition, the current cascade_at can be used to download a lot of the data.
Eventually, the root_node_database and :ref:`all_node_db`
should probably be joined into one.

All Node Database
=================
In addition to the root node database,
the input includes the :ref:`all_node_db`.

Program Plan
************
- Use cascade_ode, fit_ihme.py, cascade_at,
  to get ideas for the design the algorithm.
- Test using a data simulator with multiple levels of random effects.
- Use python for the program.
- The *root_node* database specifies difference priors for all the fits.
- The *root_node* database value priors are used for the *root_node*.
  They are also used for other nodes except.
  The mean and standard deviation are for another node are
  computed using the posterior distributions for the fit where
  *fit_node* is the parent of the other node.
- The avgint node_id column will be set to the *fit_node*.
  This makes the predict table yield predictions for the *fit_node*.
- If there is no data for a *fit_node*, no fit is necessary and the predictions
  can be done using the prior means.
- If a fit terminates with an error, the corresponding predictions are not
  calculated and none of its child nodes are fit. The fit could be continued by
  making the fit_node the root_node for a new cascade and changing some of
  the settings; e.g., values in the option table.

Documentation
=============
Use ``xsrst.py`` to extract sphinx-rst documentation from the source code.
Use the following order for heading underline characters in each web page:
``#``, ``*``, ``=``, ``-``, ``^``, ``"``.


Output Data
***********

Directories
===========
We use the notation *root_node_id* and *fit_node_id* for the
node id of the corresponding to *root_node* and *fit_node*.
The results for *root_node* are stored in

   *top_directory*/*root_node_id*/dismod.db

The results for other *fit_nodes* are stored in

   *top_directory*/.../*parent_node_id*/*fit_node_id*/dismod.db

where *parent_node_id* is the node id corresponding to parent of *fit_node*.
Do not confuse this with the parent_node in the dismod_at option table
which is the *fit_node* in this context.

dismod.db
=========
This database contains the information listed below
for the corresponding *fit_node*:

===========    ==============================================================
**Table**      **Information**
log            warnings and error messages
fit_var        optimal fixed and random effects for this fit_node
predict_fit    predictions corresponding to this fit_node location.
trace_fixed    optimizer trace for optimizing the fixed effects
sample         posterior samples of the fixed and random effects for fit_node
predict_sam    predictions, for this fit_node,  corresponding to sampled
               fixed and random effects
===========    ==============================================================

Dismod_at Wish List
*******************
The following changes to dismod_at would make at_cascade easier to implement,
would make its output easier to understand, or would make it more robust.

- Automatically remove variables at bounds from asymptotic statistics.
- Implement a Jacobian, instead of Hessian, version of asymptotic statistics.
  There is a problem with this idea because the number of independent samples,
  and rank of the information matrix estimate, is bounded by the number of
  child nodes.

These changes will be made in a backward compatible way so that
current code that uses dismod_at still works.

{xsrst_end plan}
