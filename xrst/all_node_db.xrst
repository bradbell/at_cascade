# SPDX-License-Identifier: AGPL-3.0-or-later
# SPDX-FileCopyrightText: University of Washington <https://www.washington.edu>
# SPDX-FileContributor: 2021-22 Bradley M. Bell
# ----------------------------------------------------------------------------
{xrst_begin_parent all_node_db}
{xrst_spell
   tbl
}

The All Node DataBase
#####################
This data base contains information for all the nodes between the
:ref:`glossary@root_node` and the :ref:`glossary@fit_goal_set`.

Primary Key
***********
If *tbl_name* is the name of a table in this database,
the primary key column has name *tbl_name*\ ``_id`` .
This must be the first column, have type ``integer`` ,
initial value is zero, and it must increment by one for each row.

{xrst_end all_node_db}
------------------------------------------------------------------------------
{xrst_begin omega_grid}

Omega Grid
##########
The :ref:`glossary@omega_grid` is specified by the
omega_age_grid and omega_time_grid tables.

omega_age_grid Table
********************
This table has two columns, *omega_age_grid_id* and age_id.
If this table is empty, the omega_time_grid table must also be empty.

n_omega_age
===========
We use the notation n_omega_age for the number of values in this table.

omega_age_grid_id
=================
is the :ref:`all_node_db@Primary Key` for this table.

age_id
======
This column has type ``integer`` and specifies the age grid points
by their index in the :ref:`glossary@root_node_database` age table.

omega_time_grid Table
*********************
This table has two columns, *omega_time_grid_id* and time_id.
If this table is empty, the omega_age_grid table must also be empty.

n_omega_time
============
We use the notation n_omega_time for the number of values in this table.

omega_time_grid_id
==================
is the :ref:`all_node_db@Primary Key` for this table.

time_id
=======
This column has type ``integer`` and specifies the time grid points
by their index in the root_node_database time table.

{xrst_end omega_grid}
------------------------------------------------------------------------------
{xrst_begin all_omega}

All Node omega Values
#####################
The combination of the all_omega and omega_index tables specify
the value of :ref:`glossary@omega` for all the nodes that have omega data.

all_omega Table
***************
This table specifies the value of :ref:`glossary@omega` for each
age, time point in the :ref:`omega_grid`, every node, and each reference
in the :ref:`split_reference_table`.
This data is used to compute the :ref:`omega_constraint` for each node.
If omega is not specified for a node, it will use the same *omega*
values as its nearest ancestor node.
It is an error if there is no ancestor of a
:ref:`goal node<glossary@fit_goal_set>` that has omega data.

all_omega_id
============
is the :ref:`all_node_db@Primary Key` for this table.

all_omega_value
===============
This column has type ``real`` and is the value of omega
for a specific node, age, and time; see omega_index table below.
Each value in this column is omega at a specific age and time
not on an age or time interval. If you only have omega on age and time
intervals, use the midpoint age and midpoint time in the omega grid.

omega_index Table
*****************
This table specifies the all_omega_id at which the omega values
for a particular node and split_reference begin.
Specifications for which age and time points
correspond to each all_omega_id are included below.

omega_index_id
==============
is the :ref:`all_node_db@Primary Key` for this table.

node_id
=======
This column has type ``integer`` and specifies a node by its index
in the root node database node table.

split_reference_id
==================
This column has type ``integer`` and it specifies the
index of a value in
:ref:`split_reference_table`.
If split_reference_table is empty (is not empty),
the values in this column must be (must not be) null.

all_omega_id
============
This column has type ``integer`` and specifies the index in the
all_omega table where the omega values begin,
for this node and split_reference value.
For the age index *i* equal 0 through
:ref:`n_omega_age-1<omega_grid@omega_age_grid Table@n_omega_age>`
and time index *j* equal 0 through
:ref:`n_omega_time-1<omega_grid@omega_time_grid Table@n_omega_time>` ::

   all_omega_id + i * n_omega_time + j

is the value of *all_omega_id* in the all_omega table where the
*all_omega_value* is located
for this *node_id*,
this *split_reference_id*,
the *i*-th age in the omega_grid,
and the *j*-th time in the omega_grid.
Note that each all_omega_id in the omega_index table
should be a multiple of n_omega_age * n_omega_time
(because there are that many omega entries for each node and each
split_reference value).

{xrst_end all_omega}
------------------------------------------------------------------------------
{xrst_begin all_option_table}
{xrst_spell
   bnd
   cov
   cpus
   dir
   perturb
   std
}

All Node Option Table
#####################
This table specifies certain at_cascade options

Table Format
************

all_option_id
=============
is the :ref:`all_node_db@Primary Key` for this table.

option_name
===========
This column of the option table has type ``text``.
It specifies a name that is attached to each option value.

option_value
============
This column of the option table has type ``text``.
It specifies a value that is attached to each option name.

absolute_covariates
*******************
This is a space separated list of the names for the
covariates that do not change their reference value.
If this option does not appear, there are no absolute covariates.

balance_fit
***********
If this option appears, the :ref:`all_option_table@max_fit` option
must also appear. This option specifies how dismod_at should balance
the randomly selected samples.
It is a space separated list with the following values
in the following order:

1. *cov_name* is the name of the covariate that we are balancing.
2. *value_1*  is the lower covariate value that we are balancing.
3. *value_2*   is the upper covariate values that we are balancing.


max_abs_effect
**************
If this option appears, it specifies an extra bound on the
absolute value of the covariate multipliers,
except for measurement noise multipliers.
To be specific, the bound on the covariate multiplier is as large as possible
under the condition

| |tab| *max_abs_effect* <= | *cov_bnd* * ( *cov_value* - *cov_ref* ) |

where *cov_bnd* is the non-negative covariate multiplier bound,
*cov_value* is a data table value of the covariate,
and *cov_ref* is the reference value for the covariate.
It is an extra bound because it is in addition to the priors for a
covariate multiplier.

max_fit
*******
This is a text representation of a non-negative integer specifying
the maximum number of values to fit for each integrand.
If more than this number of values are available,
at a :ref:`glossary@fit_node` and for one integrand,
a randomly selected subset of the values
are held out so that only this number are included in the fit.
If this option does not appear, all of the data for each integrand is included
(unless held out in the root_node data table or option table).

mulcov_freeze
=============
If this the node_id and split_reference_id for this fit appears in the
:ref:`mulcov_freeze_table`, the maximum number of values to fit is doubled.
This results in a better representation of the covariate multipliers
before freezing them for the jobs that will use the value determined
by this fit.

max_number_cpu
**************
This is the maximum number of cpus (processors) that
:ref:`cascade_root_node` or :ref:`continue_cascade` can use.
If this is one (more than one) the jobs in the
:ref:`create_job_table@job_table`
will be run in sequentially (in parallel).
If this option does not appear, the value one is used.
If running sequentially, the command output is printed to the screen.
Otherwise, it is printed to a file called $code trace.out$ in the
output directory corresponding to the job being run.


perturb_optimization_scale
**************************
This is the standard deviation of the log of a random multiplier.
The multiplier is used to randomly shift the
optimization scaling point from the prior mean.
The scaling point is then projected back to the feasible region.
This avoids bad scaling when the prior mean
is very close to the solution.
If this option does not appear, or if it is zero,
the scaling point is equal to the prior mean for all variables.

perturb_optimization_start
**************************
This is similar to perturb_optimization_scale except that the
starting point (instead of the scaling point) is shifted.

shared_memory_prefix
********************
This is used at the start of name for shared memory for this cascade.
No two cascades can run with the same shared_memory_prefix.
If this option does not appear, the empty string is used
for the shared_memory_prefix.

result_dir
**********
This option must appear and
all of the at_cascade output files are placed in this directory.

root_node_name
**************
This option_name must appear and the corresponding option_value
is the name of the :ref:`glossary@root_node` in the node table of the
:ref:`glossary@root_node_database` .
(The node table is the same in all the dismod_at databases.)

split_covariate_name
********************
is the name, in the root_node_database covariate table, of the splitting
covariate.
If :ref:`split_reference_table` is empty (is not empty)
this option must not (must) appear.

root_split_reference_name
*************************
This is the `split_reference_table.split_reference_name`
corresponding to the root_node_database.
If :ref:`split_reference_table` is empty (is not empty)
this option must not (must) appear.

shift_prior_std_factor
**********************
This factor multiplies the parent fit posterior standard deviation
for the :ref:`create_shift_db@shift_databases@Value Priors`
in the shifted databases.
If it is greater (less) than one, the child priors are larger (smaller)
than the posterior corresponding to the parent node fit.
If this option does not appear, the value one is used for the factor.


{xrst_end all_option_table}
------------------------------------------------------------------------------
{xrst_begin split_reference_table}

Split Reference Table
#####################
This table specifies the possible reference values for the splitting covariate.
If this table is empty (is not empty),
the :ref:`all_option_table@split_covariate_name`
must not appear (must appear).

split_reference_id
******************
is the :ref:`all_node_db@Primary Key` for this table.

split_reference_name
********************
This column has type ``text`` and contains a name attached
to each of the splitting covariate reference values.

split_reference_value
*********************
This column has type ``real`` and contains the possible reference values for
the splitting covariate.

{xrst_end split_reference_table}
------------------------------------------------------------------------------
{xrst_begin node_split_table}

Node Split Table
################
This table specifies the nodes at which the cascade will be split
by the value of the splitting covariate.
If this table is not empty,
the :ref:`all_option_table@split_covariate_name`
must appear and the
:ref:`split_reference_table` must not be empty.

node_split_id
*************
is the :ref:`all_node_db@Primary Key` for this table.

node_id
*******
This column has type ``integer`` and contains a dismod_at node_id
at which the analysis will be split by the splitting covariate; i.e.,
this node will be fit both before and after the splitting.
The set of values in this column determine the
:ref:`glossary@node_split_set`.

{xrst_end node_split_table}
------------------------------------------------------------------------------
{xrst_begin mulcov_freeze_table}

Mulcov Freeze Table
###################
This table specifies the :ref:`jobs<glossary@job>`
at which the cascade will freeze the value of covariate multipliers
for its descendants (starting with its child jobs).
To be specific, the lower and upper limit for the covariate
multiplier in descendants of the job will be optimal value determined by job;
see :ref:`create_job_table@job_table@parent_job_id` in the job table.

mulcov_freeze_id
****************
is the :ref:`all_node_db@Primary Key` for this table.

fit_node_id
***********
is the :ref:`create_job_table@job_table@fit_node_id` for the job
that will freeze the multiplier.

split_reference_id
******************
is the :ref:`create_job_table@job_table@split_reference_id` for the job
that will freeze the multiplier.
This value is null if and only if the
:ref:`split_reference_table` is empty.

mulcov_id
*********
is the primary key in the dismod_at mulcov table for the multiplier
that is frozen.

{xrst_end mulcov_freeze_table}
------------------------------------------------------------------------------
