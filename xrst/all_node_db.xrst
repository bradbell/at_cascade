# SPDX-License-Identifier: AGPL-3.0-or-later
# SPDX-FileCopyrightText: University of Washington <https://www.washington.edu>
# SPDX-FileContributor: 2021-24 Bradley M. Bell
# ----------------------------------------------------------------------------
{xrst_begin_parent all_node_db}
{xrst_spell
  tbl
}

The All Node DataBase
#####################
This data base contains information for all the nodes between the
:ref:`glossary@root_node` and the :ref:`glossary@fit_goal_set`.

Primary Key
***********
If *tbl_name* is the name of a table in this database,
the primary key column has name *tbl_name*\ ``_id`` .
This must be the first column, have type ``integer`` ,
initial value is zero, and it must increment by one for each row.

{xrst_end all_node_db}
------------------------------------------------------------------------------
{xrst_begin cov_reference_table}

Covariate Reference Table
#########################
This table specifies the covariate reference value for every possible
:ref:`glossary@job` ; i.e., node_id , split_reference_id pair.

cov_reference_id
****************
is the :ref:`all_node_db@Primary Key` for this table.

node_id
*******
This column has type ``integer`` and specifies a node by its index
in the root node database node table.
The root node and all its descendants will appear in this column.

split_reference_id
******************
This column has type ``integer`` and it specifies the
index of a value in
:ref:`split_reference_table-name`.
If split_reference_table is empty (is not empty),
the values in this column must be (must not be) null.
All the possible *split_reference_id* values will appear for each
*node_id* value.

covariate_id
************
This column has type ``integer`` and it specifies the
covariate by its index in the :ref:`glossary@root_database` covariate table.
All the possible *covariate_id* values will appear for each
( *node_id* , *split_reference* ) pair.

reference_value
***************
This column has type ``real`` and is the reference value for this covariate
for the job corresponding to this (node_id, split_reference_id) .

{xrst_end cov_reference_table}
------------------------------------------------------------------------------
{xrst_begin omega_grid}

Omega Grid
##########
The :ref:`glossary@omega_grid` is specified by the
omega_age_grid and omega_time_grid tables.

omega_age_grid Table
********************
This table has two columns, *omega_age_grid_id* and age_id.
If this table is empty, the omega_time_grid table must also be empty.

n_omega_age
===========
We use the notation n_omega_age for the number of values in this table.

omega_age_grid_id
=================
is the :ref:`all_node_db@Primary Key` for this table.

age_id
======
This column has type ``integer`` and specifies the age grid points
by their index in the :ref:`glossary@root_database` age table.

omega_time_grid Table
*********************
This table has two columns, *omega_time_grid_id* and time_id.
If this table is empty, the omega_age_grid table must also be empty.

n_omega_time
============
We use the notation n_omega_time for the number of values in this table.

omega_time_grid_id
==================
is the :ref:`all_node_db@Primary Key` for this table.

time_id
=======
This column has type ``integer`` and specifies the time grid points
by their index in the root_database time table.

{xrst_end omega_grid}
------------------------------------------------------------------------------
{xrst_begin omega_all}

All Node omega Values
#####################
The combination of the omega_all and omega_index tables specify
the value of :ref:`glossary@omega` for all the nodes that have omega data.

omega_all Table
***************
This table specifies the value of :ref:`glossary@omega` for each
age, time point in the :ref:`omega_grid-name`, every node, and each reference
in the :ref:`split_reference_table-name`.
This data is used to compute the :ref:`omega_constraint-name` for each node.
If omega is not specified for a node, it will use the same *omega*
values as its nearest ancestor node.
It is an error if there is no ancestor of a
:ref:`goal node<glossary@fit_goal_set>` that has omega data.

omega_all_id
============
is the :ref:`all_node_db@Primary Key` for this table.

omega_all_value
===============
This column has type ``real`` and is the value of omega
for a specific node, age, and time; see omega_index table below.
Each value in this column is omega at a specific age and time
not on an age or time interval. If you only have omega on age and time
intervals, use the midpoint age and midpoint time in the omega grid.

omega_index Table
*****************
This table specifies the omega_all_id at which the omega values
for a particular node and split_reference begin.
Specifications for which age and time points
correspond to each omega_all_id are included below.

omega_index_id
==============
is the :ref:`all_node_db@Primary Key` for this table.

node_id
=======
This column has type ``integer`` and specifies a node by its index
in the root node database node table.

split_reference_id
==================
This column has type ``integer`` and it specifies the
index of a value in
:ref:`split_reference_table-name`.
If split_reference_table is empty (is not empty),
the values in this column must be (must not be) null.

omega_all_id
============
This column has type ``integer`` and specifies the index in the
omega_all table where the omega values begin,
for this node and split_reference value.
For the age index *i* equal 0 through
:ref:`n_omega_age-1<omega_grid@omega_age_grid Table@n_omega_age>`
and time index *j* equal 0 through
:ref:`n_omega_time-1<omega_grid@omega_time_grid Table@n_omega_time>` ::

   omega_all_id + i * n_omega_time + j

is the value of *omega_all_id* in the omega_all table where the
*omega_all_value* is located
for this *node_id*,
this *split_reference_id*,
the *i*-th age in the omega_grid,
and the *j*-th time in the omega_grid.
Note that each omega_all_id in the omega_index table
should be a multiple of n_omega_age * n_omega_time
(because there are that many omega entries for each node and each
split_reference value).

{xrst_end omega_all}
------------------------------------------------------------------------------
{xrst_begin option_all_table}
{xrst_spell
  bnd
  cpus
  mul
  std
}

All Node Option Table
#####################
This table specifies certain at_cascade options

Table Format
************

option_all_id
=============
is the :ref:`all_node_db@Primary Key` for this table.

option_name
===========
This column of the option table has type ``text``.
It specifies a name that is attached to each option value.

option_value
============
This column of the option table has type ``text``.
It specifies a value that is attached to each option name.

absolute_covariates
*******************
This is a space separated list of the names for the
covariates that always have reference value zero.
If this option does not appear, there are no absolute covariates.
This option is only used when
:ref:`create_all_node_db@cov_reference_table` is None in a
call to create_all_node_db.
In any event, it is overridden by the final values in
:ref:`cov_reference_table-name` .

balance_fit
***********
The subsample of the data with size
:ref:`option_all_table@max_fit` always attempts to balance child nodes; i.e,
get an equal number of data values for each child of the node
currently being fit.
If this option appears,
it specifies additional balancing that dismod_at should do
for the randomly selected data subsample.
It is a space separated list with the following values
in the following order:

1. *cov_name* is the name of the covariate that we are balancing.
2. *value_1*  is the lower covariate value that we are balancing.
3. *value_2*  is the upper covariate values that we are balancing.

If this option appears, the :ref:`option_all_table@max_fit` option
must also appear.

freeze_type
***********
This options specifies the type of freeze corresponding to the rows of the
:ref:`mulcov_freeze_table-name` .
It is either ``mean`` or ``posterior`` and its default is ``mean`` .
Each row of the mulcov_freeze table specifies a freeze job
and a freeze covariate multiplier.

mean
====
If the freeze_type is ``mean`` ,
the mean (optimal value) for the freeze covariate multiplier
determined by the freeze job will be the lower and upper limit
for the covariate multiplier in descendants of the freeze job;
see :ref:`create_job_table@job_table@parent_job_id` in the job table.
Note that if the lower and upper limits are equal, the corresponding
model variable is treated as if it has no uncertainty.

posterior
=========
If the freeze_type is ``posterior`` ,
the freeze covariate multiplier posterior, determined by the freeze job,
will be its prior distribution for all the descendants of the freeze job.
This enables one to account for the uncertainty of covariate multiplier values.

max_abs_effect
**************
If this option appears, it specifies an extra bound on the
absolute value of the covariate multipliers,
except for measurement noise multipliers.
To be specific, the bound on the covariate multiplier is as large as possible
under the condition

   *max_abs_effect* <= | *mul_bnd* * ( *cov_value* - *cov_ref* ) |

where *mul_bnd* is the non-negative covariate multiplier bound,
*cov_value* is a data table value of the covariate,
and *cov_ref* is the reference value for the covariate.
It is an extra bound because it is in addition to the priors for a
covariate multiplier.

max_fit
*******
This is a text representation of a non-negative integer specifying
the maximum number of values to fit for each integrand.
If more than this number of values are available,
at a :ref:`glossary@fit_node` and for one integrand,
a randomly selected set of the values
are held out so that only this number are included in the fit.
If this option does not appear, all of the data for each integrand is included
(unless held out in the root_node data table or option table).

mulcov_freeze
=============
If the split_reference_id and the node_id for a fit appears in the
:ref:`mulcov_freeze_table-name`, the maximum number of values to fit is doubled.
This results in a better representation of the covariate multipliers
before freezing them for the jobs that will use the value determined
by this fit.

max_number_cpu
**************
This is the maximum number of cpus (processors) that
:ref:`cascade_root_node-name` or :ref:`continue_cascade-name` can use.
If this is one (more than one) the jobs in the
:ref:`create_job_table@job_table`
will be run in sequentially (in parallel).
If running sequentially, the command output is printed to the screen.
Otherwise, it is printed to a file called $code trace.out$ in the
output directory corresponding to the job being run.
If this option does not appear, the value one is used.

no_ode_ignore
*************
The is a space separated list of rate and integrand names
that should be ignored when during a :ref:`no_ode_fit-name` .
The priors for the following variables will not be changed by no_ode_fit:

#. The rate names in *no_ode_ignore* .
#. The covariate multiplies that affect the rates in *no_ode_ignore*.
#. The covariate multiplies that affect measurement values for
   the integrands in *no_ode_ignore* .

number_sample
*************
This is the number of independent samples of the posterior distribution
for the fitted variables to generate (for each fit).
These samples are used by the dismod_at predict command to get
predictions for the children of the node being fit.
When splitting, the samples are used to predict for the
same node at the new split covariate values.
If this option does not appear, the value 20 is used.

perturb_optimization_scale
**************************
This is the standard deviation of the log of a random multiplier.
The multiplier is used to randomly shift the
optimization scaling point from the prior mean.
The scaling point is then projected back to the feasible region.
This avoids bad scaling when the prior mean
is very close to the solution.
If this option does not appear, or if it is zero,
the scaling point is equal to the prior mean for all variables.

perturb_optimization_start
**************************
This is similar to perturb_optimization_scale except that the
starting point (instead of the scaling point) is shifted.

sample_method
*************
This is either ``asymptotic`` or ``simulate`` and is the dismod_at
sampling method used to create posterior samples of the model variables
for each fit. These samples are used to create prior for the fit's
:ref:`glossary@child jobs` and for dismod_at predictions; e.g.,
:ref:`csv.predict-name` .
It is an error for *sample_method* to be ``simulate`` and
:ref:`option_all_table@number_sample` to be greater than 20.
If this option does not appear, the value ``asymptotic`` is used.

shared_memory_prefix
********************
This is used at the start of name for shared memory for this cascade.
No two cascades can run with the same shared_memory_prefix.
If this option does not appear, the empty string is used
for the shared_memory_prefix.

refit_split
***********
If this option appears, it specifies if there should be a fits,
at the same node that a split occurs at,
after the split by value of the fitting covariate.
The possible values for this option are true and false
and its default value is false.
If this is true, then the fits after the split will be used
to get the priors for the child node.
If it is false, the fit before the split will be used and there
with be no other fits at the same node.
If :ref:`split_reference_table-name` is empty, this option must be false.

result_dir
**********
This option must appear and
all of the at_cascade output files are placed in this directory.

root_node_name
**************
This option_name must appear and the corresponding option_value
is the name of the :ref:`glossary@root_node` in the node table of the
:ref:`glossary@root_database` .
(The node table is the same in all the dismod_at databases.)

root_database
*************
This option_name must appear and the corresponding option_value

root_split_reference_name
*************************
This is the `split_reference_table.split_reference_name`
corresponding to the root_database.
If :ref:`split_reference_table-name` is empty (is not empty)
this option must not (must) appear.
is the name of the :ref:`glossary@root_database` .

split_covariate_name
********************
is the name, in the root_database covariate table, of the splitting
covariate.
If :ref:`split_reference_table-name` is empty (is not empty)
this option must not (must) appear.

shift_prior_std_factor
**********************
This factor multiplies the parent fit posterior standard deviation
for the :ref:`create_shift_db@shift_databases@Value Priors`
in the shifted databases (except for the covariate multipliers).
If it is greater (less) than one, the child priors are larger (smaller)
than the posterior corresponding to the parent node fit.
If this option does not appear, the value one is used for the factor.

shift_prior_std_factor_mulcov
*****************************
This factor multiplies the parent fit posterior standard deviation
for the covariate multipliers in the shifted databases.
If this option does not appear,
*shift_prior_std_factor* is used for the factor.


{xrst_end option_all_table}
------------------------------------------------------------------------------
{xrst_begin split_reference_table}

Split Reference Table
#####################
This table specifies the possible reference values for the splitting covariate.
If this table is empty (is not empty),
the :ref:`option_all_table@split_covariate_name`
must not appear (must appear).

split_reference_id
******************
is the :ref:`all_node_db@Primary Key` for this table.

split_reference_name
********************
This column has type ``text`` and contains a name attached
to each of the splitting covariate reference values.

split_reference_value
*********************
This column has type ``real`` and contains the possible reference values for
the splitting covariate.

Example
*******
see the csv.module :ref:`csv.module@split_reference_table` .

{xrst_end split_reference_table}
------------------------------------------------------------------------------
{xrst_begin node_split_table}

Node Split Table
################
This table specifies the nodes at which the cascade will be split
by the value of the splitting covariate.
If this table is not empty,
the :ref:`option_all_table@split_covariate_name`
must appear and the
:ref:`split_reference_table-name` must not be empty.

node_split_id
*************
is the :ref:`all_node_db@Primary Key` for this table.

node_id
*******
This column has type ``integer`` and contains a dismod_at node_id
at which the analysis will be split by the splitting covariate; i.e.,
this node will be fit both before and after the splitting.
The set of values in this column determine the
:ref:`glossary@node_split_set`.

{xrst_end node_split_table}
------------------------------------------------------------------------------
{xrst_begin mulcov_freeze_table}

Mulcov Freeze Table
###################
Each row of this table specifies a :ref:`glossary@job`
and a covariate multiplier.
The cascade will freeze the value or the prior distribution
for this covariate multiplier for all descendants of this job;
see :ref:`glossary@child jobs` and :ref:`option_all_table@freeze_type`

mulcov_freeze_id
****************
is the :ref:`all_node_db@Primary Key` for this table.

fit_node_id
***********
is the :ref:`create_job_table@job_table@fit_node_id` for the job
that will freeze the multiplier.

split_reference_id
******************
is the :ref:`create_job_table@job_table@split_reference_id` for the job
that will freeze the multiplier.
This value is null if and only if the
:ref:`split_reference_table-name` is empty.

mulcov_id
*********
is the primary key in the dismod_at mulcov table for the multiplier
that is frozen.

{xrst_end mulcov_freeze_table}
------------------------------------------------------------------------------
{xrst_begin fit_goal_table}

Fit Goal Table
##############
This table restricts which nodes can be in the
:ref:`glossary@fit_goal_set` .
If it is empty, the :ref:`glossary@root_node` ,
and any descendant of the root node, can be in the fit goal set.

node_id
*******
This column has type ``integer`` and contains a dismod_at node_id
for each of the nodes in the fit goal table.

{xrst_end fit_goal_table}
------------------------------------------------------------------------------
