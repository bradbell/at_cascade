# SPDX-License-Identifier: AGPL-3.0-or-later
# SPDX-FileCopyrightText: University of Washington <https://www.washington.edu>
# SPDX-FileContributor: 2021-23 Bradley M. Bell
# ----------------------------------------------------------------------------
{xrst_begin wish_list}
{xrst_spell
   meas
   covariance
   Outputting
   std
}

Wish List for at_cascade
########################

No Ode Fit
**********
Sometimes when there is no data for a rate, the :ref:`no_ode_fit-name`
changes the prior, for the rate with no data,
There is so much data elsewhere that the
prior residual is not significant.
This is also true for covariate multiplies that affect
a rate with no data.

#. Using a smaller :ref:`csv.fit@Input Files@option_fit.csv@tolerance_fixed`
   in the :ref:`glossary@root_node_database` will help with this,
   but it will slow down all the fits.
   Using a smaller standard deviation for the affected priors may also help.
#. It would be good to have an option to not include certain rates, and
   covariate multipliers, in the no ode fit
   (just use the original prior means).
   This is the easier solution to implement.
#. It would be better to optimize each of the rates separately,
   because a rate may have only a few data points and its residuals
   would not be significant relative to the changes in the other rates.
   Optimizing each of the rates separately would be slower, unless
   it is done in parallel, which would take more time to implement.
   This would also require automatically determining which covariate
   multipliers are connected to which problem.

Meta Regression
***************
The extra measurement noise added for the mismatch between the model and the
data should decrease as one goes down the cascade.
One reason is, there are fewer levels of random effects
that are not modeled.
Another reason is, there is less variation due to covariates
that are not modeled.

csv.fit
*******

Measurement Value Covariate
===========================
Currently :ref:`csv.fit-name` automatically creates an
absolute covariate called ``one`` .
If we also automatically created a covariate
called ``meas_value`` , we could use it with a meas_value
covariate multiplier to expand or contract measurements values.

Continue Cascade
================
There should be a separate csv routine that continues a cascade from a
goal node of a previous :ref:`csv.fit-name`; i.e.
a special version of :ref:`continue_cascade-name` for csv.fit.

Prediction Grid
===============
It would be good to specify a prediction grid that may be different for
the covariate age-time grid.

See Priors for Each Fit
=======================

Outputting prior std or samples so we have uncertainty of the priors.

Retry Fit
=========
Sometimes a particular fit fails due to insufficient memory or similar problem.
It would be good to have a retry fit command that continues the cascade
does not redo all the fits.

Estimate Standard Deviations
============================
Output the standard deviation for each fit value; i.e., the square root
of the diagonal of corresponding covariance matrix entry.

Duration
********

Calculate average duration for incident cases given future remission and
mortality trends. See the equation for duration as a function of age and
time from his DisMod III book, section 8.2  in
:ref:`bib@Flaxman et al. (2015)`. And the definition of duration given with
equations in :ref:`bib@Barendregt et al. (2003)`.

max_fit
*******
Add an option to ignore the :ref:`csv.fit@Input Files@option_fit.csv@max_fit`
option when fitting a leaf node; i.e., a node that has no children. (This is
actually for leaf jobs not leaf nodes in the special case where the splitting
covariate is split at a leaf node.)

ode_step_size
*************
Want to be abel to used a bigger ode step size when there is a shock
or other rapid change for a particular age or time.

No Data
*******
A fit is not necessary, and should be skipped,
when there is no data for the fit.

covariate.csv
*************
The covariate quick fix in dismod_at that attaches
covariate functions to locations,
instead of covariate values to data points.
This may use a lot of memory and take a while to set up.
One partial solution would be to not put all the nodes in the
:ref:`csv.simulate@Input Files@covariate.csv` file.
We could use the closest ancestor's covariate and omega values
when a node is not in covariate.csv.

{xrst_end wish_list}
