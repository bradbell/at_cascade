# SPDX-License-Identifier: AGPL-3.0-or-later
# SPDX-FileCopyrightText: University of Washington <https://www.washington.edu>
# SPDX-FileContributor: 2021-23 Bradley M. Bell
# ----------------------------------------------------------------------------
{xrst_begin wish_list}
{xrst_spell
   attaches
   meas
   meta
   std
   newline
}

Wish List for at_cascade
########################

Meta Regression
***************
The extra measurement noise added for the mismatch between the model and the
data should decrease as one goes down the cascade.
One reason is, there are fewer levels of random effects
that are not modeled.
Another reason is, there is less variation due to covariates
that are not modeled.

csv.fit
*******

root_node_name
==============
Change :ref:`csv.fit@Input Files@option_fit.csv@root_node_name`
from an csv.fit option to an argument in the :ref:`csv.fit@Prototype`
so that one can start with any node without changing the csv.fit input files.

root_node_sex
=============
Add a *root_node_sex* argument to the csv.fit :ref:`csv.fit@Prototype` so that
one could start with female, male, or both at the root node.
The default for this argument would be both, the way it works now.
Currently, :ref:`cascade_root_node-name` puts its root node fit in:
|newline|
|tab| *result_dir* ``/`` *root_node_name* ``/dismod.db``
|newline|
We could run the female and male fits from the same directory,
and at the same time, if cascade_root_node put its root node fit in:
|newline|
|tab| *result_dir* ``/`` *root_node_sex* ``/`` *root_node_name* ``/dismod.db``
|newline|
For example,
if ``1_Earth/dismod.db`` contains the root node fit for both sexes,
``both/1_Earth/dismod.db`` would be the new location for that fit.

Measurement Value Covariate
===========================
Currently :ref:`csv.fit-name` automatically creates an
absolute covariate called ``one`` .
If we also automatically created a covariate
called ``meas_value`` , we could use it with a meas_value
covariate multiplier to expand or contract measurements values.

Continue Cascade
================
There should be a separate csv routine that continues a cascade from a
goal node of a previous :ref:`csv.fit-name`; i.e.
a special version of :ref:`continue_cascade-name` for csv.fit.

Prediction Grid
===============
It would be good to specify a prediction grid that may be different for
the covariate age-time grid.

See Priors for Each Fit
=======================

Outputting prior std or samples so we have uncertainty of the priors.

Retry Fit
=========
Sometimes a particular fit fails due to insufficient memory or similar problem.
It would be good to have a retry fit command that continues the cascade
does not redo all the fits.

Estimate Standard Deviations
============================
Output the standard deviation for each fit value; i.e., the square root
of the diagonal of corresponding covariance matrix entry.

Duration
********

Calculate average duration for incident cases given future remission and
mortality trends. See the equation for duration as a function of age and
time from his DisMod III book, section 8.2  in
:ref:`bib@Flaxman et al. (2015)`. And the definition of duration given with
equations in :ref:`bib@Barendregt et al. (2003)`.

max_fit
*******
Add an option to ignore the :ref:`csv.fit@Input Files@option_fit.csv@max_fit`
option when fitting a leaf node; i.e., a node that has no children. (This is
actually for leaf jobs not leaf nodes in the special case where the splitting
covariate is split at a leaf node.)

ode_step_size
*************
Want to be able to used a bigger ode step size when there is a shock
or other rapid change for a particular age or time.

No Data
*******
A fit is not necessary, and should be skipped,
when there is no data for the fit.

covariate.csv
*************
The covariate quick fix in dismod_at that attaches
covariate functions to locations,
instead of covariate values to data points.
This may use a lot of memory and take a while to set up.
One partial solution would be to not put all the nodes in the
:ref:`csv.simulate@Input Files@covariate.csv` file.
We could use the closest ancestor's covariate and omega values
when a node is not in covariate.csv.

{xrst_end wish_list}
